#1.1

import numpy as np

a = np.matrix([[1, 2], [4, -1]])
b = np.matrix([[2, -3], [-4, 1]])
c = np.dot(a,b)

c1 = np.dot(b,a)
r = c - c1
print(r)

#2.2

import numpy as np

a = np.matrix([[-1, 0, 2], [0, 1, 0], [1, 2, -1]])
c = np.dot(a,a)

print(c)

#3.5

import numpy as np

a = np.matrix([[3], [1], [-1], [5], [2]])
b = np.matrix([[4, 0, -2, 3, 1]])
c = np.dot(a,b)

print(c)

#4.4

import numpy as np

a = np.matrix('1 2 3; -1 2 1; 1 3 2')
a_det = np.linalg.det(a)

print(format(a_det, '.9g'))

#5.3

import numpy as np

a = np.matrix('1 2 0 0 0; 1 0 2 0 0; 1 0 0 2 0; 1 0 0 0 2; 0 0 1 1 1')
a_det = np.linalg.det(a) #Визначник матриці

print(format(a_det, '.9g'))

#6.3

import numpy as np

A = np.matrix('1 2 2; 2 1 -2; 2 -2 1')
A_inv = np.linalg.inv(A)

print(A_inv)

#7.1

import numpy as np

A = np.matrix('1 2 3 4; 3 -1 2 5; 1 2 3 4; 1 3 4 5')

rank = np.linalg.matrix_rank(A)
print(rank)

#8.17
#Метод Крамера

import numpy as np

a = np.matrix('1 2 -1; 3 4 1; 5 1 -3')

print('A=',a)

b = np.matrix('-3; 1; -2')

print('B=',b)

def kramer (a, b):
    a_det = np.linalg.det(a)
    print('Детермінант матриці = ', a_det)

    #Зробити перевірку,що детермінант не дорівнює нулю

    if (a_det != 0):

        print ('Розв*язуємо систему')

        x_m = np.matrix(a)

        x_m[:, 0] = b # формування допоміжної матриці (1 ст. замінюємо на ст. b)

        print('x_m=', x_m)

        y_m = np.matrix(a) #2 ст. замінюємо на ст. b

        y_m[:, 1] = b #2 c

        print('y_m=',y_m)

        z_m = np.matrix(a) #3 ст. замінюємо на ст. b

        z_m[:, 2] = b

        print('z_m=',z_m)

        x = np.linalg.det(x_m) / a_det

        y = np.linalg.det(y_m) / a_det

        z = np.linalg.det(z_m) / a_det

        print('X = ', round(x,5))

        print('Y=', round(y,5))

        print('Z=', round(z,5))

    else:
        print('Розв*язків немає')

kramer(a,b)

#Перевірка за допомогою методом solve() пакету linalg:

X = np.linalg.solve(a, b)

print('Перевірка X=',X)

#МАТРИЧНИЙ МЕТОД

import numpy as np

a = np.matrix('1 2 -1; 3 4 1; 5 1 -3')

print('A=',a)

b = np.matrix('-3; 1; -2')

print('B=',b)

A_inv = np.linalg.inv(a)

print(A_inv)

X = A_inv.dot(b)

print('X=',X)


#9.5

import numpy as np

matrix = np.random.rand(4, 3)
print(matrix)

s = 0
for i in range(0, 4):
    for j in range(0, 3):
        s += matrix[i][j]
s0 = 0
s1 = 0
s2 = 0
s3 = 0
for j in range(0, 3):        
    s0 += matrix[0][j]
    s1 += matrix[1][j]
    s2 += matrix[2][j]
    s3 += matrix[3][j]
proc0 = s0*100/s
proc1 = s1*100/s
proc2 = s2*100/s
proc3 = s3*100/s
print("1й рядок займає", proc0, "%")
print("2й рядок займає", proc1, "%")
print("3й рядок займає", proc2, "%")
print("4й рядок займає", proc3, "%")

